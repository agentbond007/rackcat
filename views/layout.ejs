<!DOCTYPE html>
<html ng-app="Rackcat" ng-controller="AppCtrl">
    <head>
        <title>Sailng - Sails.js and Angular starter app / boilerplate</title>

        <!-- Viewport mobile tag for sensible mobile support -->
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <!--
        Stylesheets and Preprocessors
        ==============================
        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS). Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).
        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
        + Change the order of your CSS files
        + Import stylesheets from other directories
        + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->
        <!-- font awesome from BootstrapCDN -->
        <link href="http://netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.css" rel="stylesheet">
        <!--STYLES-->
        <link rel="stylesheet" href="/styles/importer.css">
        <link rel="stylesheet" href="/bower_components/ng-tags-input/ng-tags-input.bootstrap.css">
        <link rel="stylesheet" href="/bower_components/ng-tags-input/ng-tags-input.bootstrap.min.css">
        <link rel="stylesheet" href="/bower_components/ng-tags-input/ng-tags-input.css">
        <link rel="stylesheet" href="/bower_components/ng-tags-input/ng-tags-input.min.css">
        <!--STYLES END-->
    </head>
<body>
<%- body %>
<!--
Client-side Javascript
========================
You can always bring in JS files manually with `script` tags, or asynchronously
on the client using a solution like AMD (RequireJS). Or, if you like, you can
take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
By default, filesin your `assets/linker/js` folder are included here
automatically (between SCRIPTS and SCRIPTS END). Both JavaScript (.js) and
CoffeeScript (.coffee) are supported. In production, your scripts will be minified
and concatenated into a single file.
To customize any part of the built-in behavior, just edit your Gruntfile.
For example, here are a few things you could do:
+ Change the order of your scripts
+ Import scripts from other directories
+ Use a different preprocessor, like TypeScript
-->
<!--SCRIPTS-->
<script src="/bower_components/jquery/dist/jquery.js"></script>
<script src="/bower_components/bootstrap/dist/js/bootstrap.js"></script>
<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-bootstrap/ui-bootstrap-tpls.js"></script>
<script src="/bower_components/angular-ui-router/release/angular-ui-router.js"></script>
<script src="/bower_components/ng-tags-input/ng-tags-input.js"></script>
<script src="/bower_components/lodash/lodash.js"></script>
<script src="/bower_components/moment/moment.js"></script>
<script src="/bower_components/angular-moment/angular-moment.js"></script>
<script src="/bower_components/angular-resource/angular-resource.js"></script>
<script src="/src/app/app.js"></script>
<script src="/src/app/auth/index.js"></script>
<script src="/src/app/dashboard/index.js"></script>
<script src="/src/app/header/index.js"></script>
<script src="/src/app/itemtype/index.js"></script>
<script src="/src/app/location/index.js"></script>
<script src="/src/app/rack/index.js"></script>
<script src="/src/common/directives/comment.js"></script>
<script src="/src/common/directives/confirmDelete.js"></script>
<script src="/src/common/directives/index.js"></script>
<script src="/src/common/directives/pageHeading.js"></script>
<script src="/src/common/models/comment.js"></script>
<script src="/src/common/models/index.js"></script>
<script src="/src/common/models/itemtype.js"></script>
<script src="/src/common/models/location.js"></script>
<script src="/src/common/models/rack.js"></script>
<script src="/src/common/models/tag.js"></script>
<script src="/src/common/models/user.js"></script>
<script src="/src/common/services/accesslevels.js"></script>
<script src="/src/common/services/auth.js"></script>
<script src="/src/common/services/config.js"></script>
<script src="/src/common/services/index.js"></script>
<script src="/src/common/services/localstorage.js"></script>
<script src="/src/common/services/lodash.js"></script>
<script src="/src/common/services/user.js"></script>
<script src="/src/common/services/utils.js"></script>
<!--SCRIPTS END-->
<!--
Client-side Templates
========================
HTML templates are important prerequisites of modern, rich client applications.
To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
that you load these templates client-side.
By default, your Gruntfile is configured to automatically load and precompile
client-side JST templates in your `assets/linker/templates` folder, then
include them here automatically (between TEMPLATES and TEMPLATES END).
To customize this behavior to fit your needs, just edit your Gruntfile.
For example, here are a few things you could do:
+ Import templates from other directories
+ Use a different template engine (handlebars, jade, dust, etc.)
+ Internationalize your client-side templates using a server-side
stringfile before they're served.
-->
<!--TEMPLATES-->
<script type="text/javascript" src="/jst.js"></script>
<!--TEMPLATES END-->
</body>
</html>
